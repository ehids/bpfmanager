// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xbf\x0f\xd2\x40\x14\xc7\xbf\x57\x90\x5f\x3a\xa0\x83\x69\x88\x43\x17\x8d\x2e\x87\x38\xe8\xe0\xc2\x82\x2e\x35\x31\xea\x68\xd2\x54\xa8\xa1\xa1\x3f\x48\xdb\x18\x14\x13\x27\x77\x17\x77\xfd\x0f\xdc\x18\xf5\xcf\x70\x70\x60\x74\xd4\xc9\xcd\x33\x57\xde\x01\x79\xb4\xc1\x97\x5c\xdf\x7b\x9f\xcb\xfb\xd9\x7b\x37\x71\x1f\x58\x42\xc0\x88\xc0\x1f\x1c\xbc\x83\x38\xd6\xc1\x1e\xd3\xb7\x07\x01\x5b\x00\xcb\x34\x4c\x34\x29\x6e\xf5\xb0\x1e\xfc\x52\xda\xd6\xfc\xe9\x23\x67\xae\xed\x34\x5d\x38\xeb\xc1\xcf\x3d\x8f\x17\xb3\x50\xdb\x99\x73\xd3\x5d\x0f\xb6\x25\xff\xfa\x79\x97\xbb\x2d\x80\xad\x52\x6a\x63\x01\x36\x80\xf7\x00\x5a\x00\x36\x54\xfb\x23\xeb\x4b\xe7\xd2\x79\x74\x2d\x5d\x47\xf7\xa2\xfb\x78\xf8\xd8\xc5\x5f\xa5\x54\xdf\xcc\xf5\xe6\x09\x3a\x6f\x2f\x8a\x4b\xd8\xe5\xb5\x8f\x72\xac\x2a\xe6\xe5\x32\x01\xd0\xc4\x6f\x55\x75\xd7\x40\xe3\x84\xb5\x01\x5c\x39\xe2\xa6\x86\x04\x70\x19\x17\xf6\xbc\x49\xfa\x7a\xc9\x5b\x27\xfc\x1a\x69\x8b\x0e\x64\x11\xac\x0a\x44\x79\xec\x2d\xfd\x62\xee\x95\xf3\x6b\x77\x78\xe4\x7a\xaf\x82\x2c\x0f\xd3\x04\x5e\x14\x4e\x83\x24\x0f\x20\xb3\x20\x92\xc1\xdc\x7b\x99\xf9\x71\x80\xd8\x0f\x13\x39\x85\xcc\x8b\xac\xf0\x5f\x40\xe6\xaf\xe3\x52\x67\xe9\xcc\x2f\x7c\x8d\x47\x72\x74\xf7\x3f\xb6\x72\x5e\xdc\x72\x3f\xa7\xf2\x85\x1e\x59\xc4\x38\x7f\x7b\x82\x4e\x8b\xf1\x71\x4d\xbd\x26\xf3\xaf\x9e\x89\xe7\xff\xbe\xc3\xfc\xe7\x14\x7f\x87\xf1\x6f\xa4\x6d\xc6\xfb\x6c\x8e\x21\xd9\x7c\x07\xdf\x6b\xfa\xe5\xf3\xdf\xa8\x89\xff\x51\x13\xcf\xfd\xfb\x14\x6f\x31\xbe\x25\x7d\x9b\x71\x3e\xff\x3d\x00\xdd\x8a\x7d\x7f\xa2\x46\xcd\xbc\x5d\x7a\xf3\x26\xde\xf0\x67\x15\xb5\xcb\x7b\x8a\xff\x40\xbe\x99\xd1\xc4\x9b\xbd\xfe\x0b\x00\x00\xff\xff\xb4\x32\xaa\xdc\xa0\x04\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 1184,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1704699634, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
